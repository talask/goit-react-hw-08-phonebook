{"version":3,"file":"static/js/950.c5c412c4.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","components/Contacts/Contacts.styled.js","components/Contacts/ContactItem.jsx","redux/contacts/selectors.js","components/Contacts/Contacts.jsx","components/ContactForm/ContactForm.jsx","redux/contacts/filterSlice.js","components/Filter/Filter.jsx","components/Common/App.styled.js","components/RegistredLayout/RegistredLayout.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Button = styled.button`\n    outline: none;\n    cursor: pointer;\n    display: block;\n    margin: 0 auto;\n    padding: 10px;\n    width: 150px;\n    \n    background: lightblue;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n\n    &:hover {\n        background: blue;\n        color: white;\n    }\n`;\n\nexport const DivMyForm = styled.div`\n    border: 1px solid lightgrey;\n    width: 300px;\n    padding: 15px;\n`;\n\nexport const Label = styled.label`\n     margin-bottom: 5px;\n`;\n       \nexport const InputField = styled.input`\n    outline: none;\n    padding: 5px 8px;\n    margin-bottom: 10px;\n    width: 250px;\n    font-size: 18px;\n`;\n","import styled from \"styled-components\";\n\nexport const LoaderDiv = styled.div`\n    margin: 0 auto;\n    padding: 20px;\n`;","import { Dna } from 'react-loader-spinner';\nimport { LoaderDiv } from \"./Loader.styled\";\n\nexport const Loader = () => {\n    return (\n        <LoaderDiv>\n            <Dna\n                height=\"180\"\n                width=\"180\" \n            />\n        </LoaderDiv>\n    )\n}","import styled from 'styled-components';\n\nexport const Table = styled.table`\n    width: 90%;\n`;\n\nexport const ButtonDel = styled.button`\n    outline: none;\n    cursor: pointer;\n    display: block;\n    margin: 0 auto;\n    padding: 5px;\n    background: lightblue;\n    border: 1px solid lightblue;\n    border-radius: 5px;\n    text-align: center;\n\n    &:hover {\n        background: blue;\n        color: white;\n    }\n`;\n\nexport const TdUserData =  styled.td `\n    padding: 5px;\n`;\n    \n","import PropTypes from 'prop-types';\nimport { ButtonDel, TdUserData } from './Contacts.styled';\n\nexport const ContactItem = ({ name, phone, id, fnDelete}) => {\n    return (\n        <tr>\n            <TdUserData >{name}:</TdUserData > \n            <TdUserData >{phone}</TdUserData > \n            <TdUserData >\n                <ButtonDel type='button' \n                onClick={() => {fnDelete(id)}}>\n                    Delete\n                </ButtonDel>\n            </TdUserData >\n        </tr>\n    )\n}\n\nContactItem.propTypes = {\n   \n    name: PropTypes.string, \n    number: PropTypes.string, \n    id: PropTypes.string,\n    fnDelete: PropTypes.func,\n}","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contactserror;\nexport const getFilter = state => state.filter.filter;","\nimport { ContactItem } from './ContactItem';\nimport { Table } from './Contacts.styled';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts } from 'redux/contacts/selectors'; \nimport { getFilter } from 'redux/contacts/selectors'; \nimport { deleteContact } from 'redux/contacts/operation'; \n\nexport const Contacts = () => {\n    const contacts = useSelector(getContacts);\n    const filter = useSelector(getFilter);\n   \n    const dispatch = useDispatch();\n    \n    const fnDelete = (id) => {\n        dispatch(deleteContact(id));\n      \n    }\n\n    const visibleContacts = () => {\n        if(filter)\n            return contacts.filter(contact =>\n                contact.name.toLowerCase().includes(filter.toLowerCase()),\n            );\n        \n        return contacts;\n      };\n\n   \n    return ( \n        contacts.length > 0 && <Table>\n            <tbody>\n                {visibleContacts().map(({name, phone, id}, i) => {\n                    console.log(name, phone, id)\n                    return (\n                        <ContactItem \n                            key={i}\n                            name={name} \n                            phone={phone} \n                            id={id}\n                            fnDelete={fnDelete}\n                        ></ContactItem>\n                    )\n                }\n                )}\n            </tbody>\n        </Table>\n    )\n}\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Button, DivMyForm, Label } from './ContactForm.styled';\nimport * as yup from 'yup';\nimport styled from 'styled-components';\nimport { useDispatch } from \"react-redux\";\n// import { getContacts } from 'redux/selectors';\nimport { fetchContacts, addContact  } from 'redux/contacts/operation';\n\n\n\nconst InputField = styled(Field)`\n    outline: none;\n    padding: 5px 8px;\n    margin-bottom: 10px;\n    width: 250px;\n    font-size: 18px;\n`;\n\nconst ErrorField = styled(ErrorMessage)`\n  color: red;\n  font-size: 10px;\n`\n\nconst initialValues = {\n  name: '',\n  phone: '',\n};\n\nconst nameRegExp = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst phoneRegExp = /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nconst schema = yup.object().shape({\n  name: yup.string().matches(nameRegExp, 'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d\\'Artagnan').required(),\n  phone: yup.string().matches(phoneRegExp, 'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +').required(),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const handleContactsChange = (obj) => {\n    \n    dispatch(addContact(obj));\n    dispatch(fetchContacts());   \n  };\n\n    return ( \n      <DivMyForm>\n        <Formik\n            initialValues = {initialValues}\n            validationSchema = {schema}\n            onSubmit = {(values, {resetForm}) => {\n              \n              handleContactsChange(values);\n              resetForm();\n            }}\n        >\n            <Form>\n                <Label>\n                 Name\n                </Label>\n                <InputField \n                    type=\"text\"\n                    name=\"name\"\n                />\n                <ErrorField name=\"name\" component=\"div\" />\n                <Label>\n                    Phone\n                </Label>\n                <InputField \n                    type=\"tel\"\n                    name=\"phone\"\n                />\n                <ErrorField name=\"phone\" component=\"div\" />\n                <Button type=\"submit\">Add contact</Button>\n            </Form>\n          </Formik>\n        </DivMyForm>\n        )\n    }\n\n  ","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialFilterState = {\n    filter: '',\n  };\n\nconst filterSlice = createSlice({\n    name: 'filter',\n    initialState: initialFilterState,\n    reducers: {\n        updateFilter(state, action) {\n        state.filter = action.payload;\n        },\n    },\n});\n\nexport const { updateFilter } = filterSlice.actions;\n\nexport const filterReducer = filterSlice.reducer;\n\n","import { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { InputField } from '../ContactForm/ContactForm.styled';\nimport { getFilter } from 'redux/contacts/selectors'; \nimport { updateFilter } from 'redux/contacts/filterSlice';\n\n\nexport const Filter = () => {\n    \n    const filter = useSelector(getFilter);\n    const dispatch = useDispatch();\n\n    const handleChange = evt => {\n        const { value } = evt.target;\n        dispatch(updateFilter(value));\n    };\n\n    return (\n        <>\n            <p>\n                Find contacts by name\n            </p>\n            <InputField \n                type=\"text\"\n                name=\"filter\"\n                value={filter}\n                id={nanoid()}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                onChange={handleChange}\n                required\n            />\n        </>\n    )\n}\n\n","import styled from 'styled-components';\n\nexport const Div = styled.div`\n    width: 400px;\n    margin: 0 auto;\n    padding: 10px 15px;\n\n    h1 {\n        font-size: 26px;\n        text-align: center;\n    }\n\n    h2 {\n        font-size: 26px;\n        text-align: center;\n    }\n`;","import { Loader } from \"../Loader/Loader\";\nimport { Contacts } from '../Contacts/Contacts';\nimport { ContactForm } from '../ContactForm/ContactForm';\nimport { Filter } from \"components/Filter/Filter\"; \nimport { Div } from \"components/Common/App.styled\"; \nimport { getIsLoading, getError } from \"redux/contacts/selectors\";\n\nimport { useSelector } from \"react-redux\";\n\nexport const RegistredLayout = () => {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n    return (\n      <Div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n          <h2>Contacts</h2>\n          <Filter/>\n          {isLoading && !error && <Loader/>}\n        <Contacts/>\n    </Div>\n    )\n}"],"names":["Button","styled","DivMyForm","Label","InputField","LoaderDiv","Loader","height","width","Table","ButtonDel","TdUserData","ContactItem","name","phone","id","fnDelete","type","onClick","getContacts","state","contacts","items","getIsLoading","isLoading","getError","contactserror","getFilter","filter","Contacts","useSelector","dispatch","useDispatch","deleteContact","length","contact","toLowerCase","includes","map","i","console","log","Field","ErrorField","ErrorMessage","initialValues","schema","yup","shape","matches","required","ContactForm","validationSchema","onSubmit","values","obj","resetForm","addContact","fetchContacts","component","filterSlice","createSlice","initialState","reducers","updateFilter","action","payload","actions","Filter","reducer","value","nanoid","pattern","title","onChange","evt","target","Div","RegistredLayout","error"],"sourceRoot":""}